type Plantation @aws_iam @aws_api_key {
  id: ID!
  lib: String
  images(filter: ModelImageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelImageConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Image @aws_iam @aws_api_key {
  id: ID!
  nom: String
  scannedAt: AWSDate
  isScanned: Boolean
  isSafe: Boolean
  imagePath: String
  createdAt: AWSDateTime
  coordinates: String
  plantationId: ID!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPlantationConnection @aws_api_key @aws_iam {
  items: [Plantation]!
  nextToken: String
}

input ModelPlantationFilterInput {
  id: ModelIDInput
  lib: ModelStringInput
  and: [ModelPlantationFilterInput]
  or: [ModelPlantationFilterInput]
  not: ModelPlantationFilterInput
}

type Query {
  getPlantation(id: ID!): Plantation @aws_api_key @aws_iam
  listPlantations(id: ID, filter: ModelPlantationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPlantationConnection @aws_api_key @aws_iam
  getImage(id: ID!): Image @aws_api_key @aws_iam
  listImages(id: ID, filter: ModelImageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelImageConnection @aws_api_key @aws_iam
  imagesByPlantationId(plantationId: ID!, sortDirection: ModelSortDirection, filter: ModelImageFilterInput, limit: Int, nextToken: String): ModelImageConnection @aws_api_key @aws_iam
}

input ModelPlantationConditionInput {
  lib: ModelStringInput
  and: [ModelPlantationConditionInput]
  or: [ModelPlantationConditionInput]
  not: ModelPlantationConditionInput
}

input CreatePlantationInput {
  id: ID
  lib: String
}

input UpdatePlantationInput {
  id: ID!
  lib: String
}

input DeletePlantationInput {
  id: ID!
}

type Mutation {
  createPlantation(input: CreatePlantationInput!, condition: ModelPlantationConditionInput): Plantation @aws_api_key @aws_iam
  updatePlantation(input: UpdatePlantationInput!, condition: ModelPlantationConditionInput): Plantation @aws_api_key @aws_iam
  deletePlantation(input: DeletePlantationInput!, condition: ModelPlantationConditionInput): Plantation @aws_api_key @aws_iam
  createImage(input: CreateImageInput!, condition: ModelImageConditionInput): Image @aws_api_key @aws_iam
  updateImage(input: UpdateImageInput!, condition: ModelImageConditionInput): Image @aws_api_key @aws_iam
  deleteImage(input: DeleteImageInput!, condition: ModelImageConditionInput): Image @aws_api_key @aws_iam
}

input ModelSubscriptionPlantationFilterInput {
  id: ModelSubscriptionIDInput
  lib: ModelSubscriptionStringInput
  and: [ModelSubscriptionPlantationFilterInput]
  or: [ModelSubscriptionPlantationFilterInput]
}

type Subscription {
  onCreatePlantation(filter: ModelSubscriptionPlantationFilterInput): Plantation @aws_subscribe(mutations: ["createPlantation"]) @aws_api_key @aws_iam
  onUpdatePlantation(filter: ModelSubscriptionPlantationFilterInput): Plantation @aws_subscribe(mutations: ["updatePlantation"]) @aws_api_key @aws_iam
  onDeletePlantation(filter: ModelSubscriptionPlantationFilterInput): Plantation @aws_subscribe(mutations: ["deletePlantation"]) @aws_api_key @aws_iam
  onCreateImage(filter: ModelSubscriptionImageFilterInput): Image @aws_subscribe(mutations: ["createImage"]) @aws_api_key @aws_iam
  onUpdateImage(filter: ModelSubscriptionImageFilterInput): Image @aws_subscribe(mutations: ["updateImage"]) @aws_api_key @aws_iam
  onDeleteImage(filter: ModelSubscriptionImageFilterInput): Image @aws_subscribe(mutations: ["deleteImage"]) @aws_api_key @aws_iam
}

type ModelImageConnection @aws_iam @aws_api_key {
  items: [Image]!
  nextToken: String
}

input ModelImageFilterInput {
  id: ModelIDInput
  nom: ModelStringInput
  scannedAt: ModelStringInput
  isScanned: ModelBooleanInput
  isSafe: ModelBooleanInput
  imagePath: ModelStringInput
  createdAt: ModelStringInput
  coordinates: ModelStringInput
  plantationId: ModelIDInput
  and: [ModelImageFilterInput]
  or: [ModelImageFilterInput]
  not: ModelImageFilterInput
}

input ModelImageConditionInput {
  nom: ModelStringInput
  scannedAt: ModelStringInput
  isScanned: ModelBooleanInput
  isSafe: ModelBooleanInput
  imagePath: ModelStringInput
  createdAt: ModelStringInput
  coordinates: ModelStringInput
  plantationId: ModelIDInput
  and: [ModelImageConditionInput]
  or: [ModelImageConditionInput]
  not: ModelImageConditionInput
}

input CreateImageInput {
  id: ID
  nom: String
  scannedAt: AWSDate
  isScanned: Boolean
  isSafe: Boolean
  imagePath: String
  createdAt: AWSDateTime
  coordinates: String
  plantationId: ID!
}

input UpdateImageInput {
  id: ID!
  nom: String
  scannedAt: AWSDate
  isScanned: Boolean
  isSafe: Boolean
  imagePath: String
  createdAt: AWSDateTime
  coordinates: String
  plantationId: ID
}

input DeleteImageInput {
  id: ID!
}

input ModelSubscriptionImageFilterInput {
  id: ModelSubscriptionIDInput
  nom: ModelSubscriptionStringInput
  scannedAt: ModelSubscriptionStringInput
  isScanned: ModelSubscriptionBooleanInput
  isSafe: ModelSubscriptionBooleanInput
  imagePath: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  coordinates: ModelSubscriptionStringInput
  plantationId: ModelSubscriptionIDInput
  and: [ModelSubscriptionImageFilterInput]
  or: [ModelSubscriptionImageFilterInput]
}
